#!/usr/bin/env python
#
#    Copyright (c) 2011-2013 Anton Tyurin <noxiouz@yandex.ru>
#    Copyright (c) 2011-2013 Other contributors as noted in the AUTHORS file.
#
#    This file is part of Cocaine.
#
#    Cocaine is free software; you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as published
#    by the Free Software Foundation; either version 3 of the License, or
#    (at your option) any later version.
#
#    Cocaine is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public License
#    along with this program. If not, see <http://www.gnu.org/licenses/>.
#

import sys

from tornado import web
from tornado.options import options
from tornadio2 import SocketServer

from flow.utils.route import Route
from flow.utils.storage import Storage
from flow.utils.daemon import Daemon
from flow.utils.options import actions

from flow.views.SocketIO import Router
from flow.views import *

import logging

chain = logging.getLogger("cocaine.futures.chain")
chain.setLevel(logging.ERROR)

STATIC_PATH = "/usr/share/cocainoom/"

SETTINGS = {
    "cookie_secret": options.SECRET_KEY,
    "debug": True,
    "login_url": "/login"}



import tornado.template
class MainHandler(tornado.web.RequestHandler):
    def get(self):
        loader = tornado.template.Loader(STATIC_PATH)
        self.write(loader.load("index.html").generate())

static =  [
    (r"/(js/.*)", web.StaticFileHandler, {"path": STATIC_PATH}),
    (r"/(css/.*)", web.StaticFileHandler, {"path": STATIC_PATH}),
    (r"/(img/.*)", web.StaticFileHandler, {"path": STATIC_PATH}),
    (r"/(font/.*)", web.StaticFileHandler, {"path": STATIC_PATH}),
    (r"/.*", MainHandler),
]

def main():
    Storage()
    app = web.Application(
        Router.apply_routes(Route.routes()) + static,
        socket_io_port=options.port,
        **SETTINGS)
    SocketServer(app)


if __name__ == "__main__":
    if options.daemon:
        d = Daemon(options.pidfile, options.user)
        if "start" in actions:
            d.run = main
            d.start()
        elif "stop" in actions:
            d.stop()
        elif "restart" in actions:
            d.run = main
            d.restart()
        elif "status" in actions:
            d.status()
        else:
            print("start|stop|restart|status")
            exit(0)
    else:
        try:
            main()
        except Exception as err:
            sys.stderr.write(str(err))
