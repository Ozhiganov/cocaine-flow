#!/usr/bin/env python
# -*- coding: utf-8 -*-
from _yaml import YAMLError
from getpass import getpass
import subprocess
from time import time
import traceback
import os
import sys
import re
import yaml
import json
import requests
from opster import command, dispatch, QuitError
import sh


API_SERVER = os.environ.get('COCAINE_API_SERVER', 'http://localhost:5000')
if not API_SERVER.startswith('http://'):
    API_SERVER = 'http://' + API_SERVER


def process_upload_exc(e, **kwargs):
    if kwargs['verbose']:
        print 'Fail'
        traceback.print_exc()
    raise QuitError("Error during app upload to server %s. Reason: %s" % (API_SERVER, e))


def process_upload_res(rv):
    if rv.status_code != 200:
        raise QuitError('Error during app upload to server %s. Reason: %s' % (API_SERVER, rv.text))


def upload_url(repo_url, token, **kwargs):
    try:
        url = API_SERVER + '/upload'
        rv = requests.post(url,
                           data={
                               'url': repo_url,
                               'token': token.strip()
                           })
    except Exception as e:
        process_upload_exc(e, **kwargs)

    process_upload_res(rv)

    return rv.text


class CVS(object):
    def __init__(self, src_dir, package_info, token, ref, **kwargs):
        self.src_dir = src_dir
        self.kwargs = kwargs
        self.package_info = package_info
        self.token = token.strip()
        self.ref = ref.strip()

    @classmethod
    def create(cls, src_dir, package_info, token, ref, **kwargs):
        src_dir = os.path.abspath(src_dir)
        cvs = CVS.define_cvs(src_dir)

        if cvs == 'git':
            cls = GIT
        elif cvs == 'svn':
            cls = SVN
        else:
            cls = FS

        return cls(os.path.abspath(src_dir), package_info, token, ref, **kwargs)

    def commit_info(self):
        raise NotImplementedError

    def verbose(self, msg, with_newline=True):
        if self.kwargs['verbose']:
            if with_newline:
                print msg
            else:
                print msg,
            sys.stdout.flush()

    def pack_app(self):
        self.verbose("Packing application from %s..." % self.src_dir, False)

        packed_app_path = "/tmp/app.tar.gz"
        try:
            # problem with "*" in sh
            # sh.tar("-czf", packed_app_path, "*", "-C", os.path.dirname(curdir))
            cmd = "tar -czf %s -C %s ." % (packed_app_path, self.src_dir)
            subprocess.call(cmd, shell=True)
        except sh.ErrorReturnCode as e:
            raise QuitError('Cannot pack application. %s' % str(e))

        self.verbose("Done")
        return packed_app_path


    def upload_app(self):
        packed_app_path = self.pack_app()

        try:
            url = API_SERVER + '/upload'
            self.verbose('Uploading application to server %s ...' % url, False)
            rv = requests.post(url,
                               data={
                                   'info': json.dumps(self.package_info),
                                   'ref': self.commit_info().strip(),
                                   'token': self.token
                               },
                               files={'app': open(packed_app_path, 'rb')})
        except Exception as e:
            process_upload_exc(e, **self.kwargs)

        process_upload_res(rv)

        self.verbose('Done')

        self.clean(packed_app_path)

        print rv.text


    @staticmethod
    def define_cvs(dir):
        if os.path.exists(dir + '/.git'):
            return 'git'
        if os.path.exists(dir + '/.svn'):
            return 'svn'
        if os.path.exists(dir + '/.hg'):
            return 'hg'

        out = sh.git('rev-parse')
        if out.exit_code == 0:
            return 'git'
        return 'fs'

    def clean(self, path):
        self.verbose('Cleaning...', False)
        sh.rm("-f", path)
        self.verbose('Done')


class SVN(CVS):
    def commit_info(self):
        if not self.ref:
            try:
                svn_info = sh.svn("info", _cwd=self.src_dir)
                return re.findall(r'Revision: (\d+)', str(svn_info))[0]
            except sh.ErrorReturnCode as e:
                raise QuitError(e.stderr)
            except IndexError:
                raise QuitError('Unable to determine revision')

        try:
            svn_log = sh.svn("log", r=self.ref, _cwd=self.src_dir)
            if svn_log.exit_code == 1:
                raise QuitError('Unknown revision %s', self.ref)
        except sh.ErrorReturnCode as e:
            raise QuitError(e.stderr)

        return self.ref


class GIT(CVS):
    def commit_info(self):
        if not self.ref:
            try:
                return sh.git("rev-parse", "HEAD", _cwd=self.src_dir)
            except sh.ErrorReturnCode as e:
                raise QuitError(e.stderr)

        try:
            return sh.git("rev-parse", "--short", self.ref, _cwd=self.src_dir)
        except sh.ErrorReturnCode as e:
            raise QuitError(e.stderr)


class FS(CVS):
    def commit_info(self):
        return str(int(time()))


def get_token(kwargs):
    token = kwargs.pop('token', False)
    if token:
        return token

    cocaine_path = os.path.expanduser("~/.cocaine")
    if not os.path.exists(cocaine_path):
        username = raw_input("Username: ")
        if not username:
            raise QuitError('Username cannot be empty')
        password = getpass()
        rv = requests.post(API_SERVER + '/token', data={
            'username': username,
            'password': password
        })
        if rv.status_code != 200:
            raise QuitError(rv.text)

        with open(cocaine_path, 'w') as f:
            f.write(rv.text)

    with open(cocaine_path, 'r') as f:
        secret_key = f.readline()
        if not secret_key:
            raise QuitError('Secret key is not installed. Use `./cocaine-flow token` to do that.')
    return secret_key


@command(shortlist=True, usage="[OPTIONS]")
def upload(src_dir=('d', '.', 'source directory of application'),
           info_dir=('i', '.', 'directory of info file'),
           repo_url=('u', '', 'repository url'),
           ref=('r', '', 'branch/tag/revision to use'),
           *args, **kwargs):
    '''Upload code to cocaine cloud'''
    token = get_token(kwargs)
    if repo_url:
        return upload_url(repo_url, token)

    info_yaml_path = os.path.abspath(info_dir) + '/info.yaml'
    if not os.path.exists(info_yaml_path):
        raise QuitError('info.yaml is required')

    try:
        package_info = yaml.load(file(info_yaml_path))
    except YAMLError as e:
        raise QuitError('Bad format of info.yaml')

    cvs = CVS.create(src_dir, package_info, token, ref, **kwargs)
    cvs.upload_app()


@command(shortlist=True)
def deploy(runlist, app_uuid, profile_name,
           profile_path=('f', '', 'path to profile file'),
           undeploy=('u', False, 'undeploy'),
           *args, **kwargs):
    token = get_token(kwargs)

    if profile_path:
        profile_path = os.path.abspath(profile_path)
        if not os.path.exists(profile_path) or os.path.isdir(profile_path):
            raise QuitError('Invalid path to profile')

        try:
            profile_info = yaml.load(file(profile_path))
        except YAMLError as e:
            raise QuitError('Bad format of profile yaml')


    if undeploy:
        url = API_SERVER + '/undeploy/%s/%s/%s' % (runlist, app_uuid, profile_name)
    else:
        url = API_SERVER + '/deploy/%s/%s/%s' % (runlist, app_uuid, profile_name)

    if profile_path:
        rv = requests.post(url, data={
            'info': json.dumps(profile_info),
            'token': token
        })
    else:
        rv = requests.post(url, data={
            'token': token
        })

    if rv.status_code != 200:
        raise QuitError('Error during  deploying on server. Reason: %s' % rv.text)

    print 'Done!'


options = [('v', 'verbose', False, 'enable additional output'),
           ('q', 'quiet', False, 'suppress output'),
           ('t', 'token', '', 'token to use')]

if __name__ == '__main__':
    dispatch(globaloptions=options)
