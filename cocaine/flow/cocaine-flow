#!/usr/bin/env python
# -*- coding: utf-8 -*-
from _yaml import YAMLError
from getpass import getpass
import subprocess
from time import time
import traceback
import os
import sys
import yaml
import json
import requests
from opster import command, dispatch, QuitError
import sh


API_SERVER = os.environ.get('COCAINE_API_SERVER', 'http://localhost:5000')
if not API_SERVER.startswith('http://'):
    API_SERVER = 'http://' + API_SERVER


def process_upload_exc(e, **kwargs):
    if kwargs['verbose']:
        traceback.print_exc()
    raise QuitError("Error during app upload to server %s. Reason: %s" % (API_SERVER, e))


def process_upload_res(rv):
    if rv.status_code != 200:
        raise QuitError('Error during app upload to server %s. Reason: %s' % (API_SERVER, rv.text))


def upload_url(repo_url, token, **kwargs):
    try:
        url = API_SERVER + '/upload'
        rv = requests.post(url,
                           data={
                               'url': repo_url,
                               'token': token.strip()
                           })
    except Exception as e:
        process_upload_exc(e, **kwargs)

    process_upload_res(rv)

    return rv.text

def upload_packed_app(packed_app_path, package_info, ref, token, **kwargs):
    try:
        url = API_SERVER + '/upload'
        rv = requests.post(url,
                           data={
                               'info': json.dumps(package_info),
                               'ref': ref.strip(),
                               'token': token.strip()
                           },
                           files={'app': open(packed_app_path, 'rb')})
    except Exception as e:
        process_upload_exc(e, **kwargs)

    process_upload_res(rv)

    return rv.text


def define_cvs(dir):
    if os.path.exists(dir + '/.git'):
        return 'git'
    if os.path.exists(dir + '/.svn'):
        return 'svn'
    if os.path.exists(dir + '/.hg'):
        return 'hg'

    out = sh.git('rev-parse')
    if str(out.exit_code) == '0':
        return 'git'
    return 'fs'


def get_real_ref(dir, ref, cvs):
    if cvs == 'fs':
        return str(int(time()))

    if not ref:
        if cvs == 'git':
            try:
                return sh.git("rev-parse", "HEAD", _cwd=dir)
            except sh.ErrorReturnCode as e:
                raise QuitError(e.stderr)
        else:
            raise QuitError("Unsupported operation with cvs=`%s`" % cvs)

    if cvs == 'git':
        try:
            return sh.git("rev-parse", "--short", ref, _cwd=dir)
        except sh.ErrorReturnCode as e:
            raise QuitError(e.stderr)

    return ref


def get_commit_info(dir, ref):
    cvs = define_cvs(dir)
    return get_real_ref(dir, ref, cvs)


def pack_app(curdir):
    packed_app_path = "/tmp/app.tar.gz"
    try:
        # problem with "*" in sh
        # sh.tar("-czf", packed_app_path, "*", "-C", os.path.dirname(curdir))
        cmd = "tar -czf %s -C %s ." % (packed_app_path, curdir)
        subprocess.call(cmd, shell=True)
    except sh.ErrorReturnCode as e:
        raise QuitError('Cannot pack application. %s' % str(e))

    return packed_app_path


def get_token(kwargs):
    token = kwargs.pop('token', False)
    if token:
        return token

    cocaine_path = os.path.expanduser("~/.cocaine")
    if not os.path.exists(cocaine_path):
        username = raw_input("Username: ")
        if not username:
            raise QuitError('Username cannot be empty')
        password = getpass()
        rv = requests.post(API_SERVER + '/token', data={
            'username': username,
            'password': password
        })
        if rv.status_code != 200:
            raise QuitError(rv.text)

        with open(cocaine_path, 'w') as f:
            f.write(rv.text)

    with open(cocaine_path, 'r') as f:
        secret_key = f.readline()
        if not secret_key:
            raise QuitError('Secret key is not installed. Use `./cocaine-flow token` to do that.')
    return secret_key


@command(shortlist=True, usage="[OPTIONS]")
def upload(src_dir=('d', '.', 'source directory of application'),
           info_dir=('i', '.', 'directory of info file'),
           repo_url=('u', '', 'repository url'),
           ref=('r', '', 'branch/tag/revision to use'),
           *args, **kwargs):
    '''Upload code to cocaine cloud'''
    token = get_token(kwargs)
    if repo_url:
        return upload_url(repo_url, token)

    info_yaml_path = os.path.abspath(info_dir) + '/info.yaml'
    if not os.path.exists(info_yaml_path):
        raise QuitError('info.yaml is required')

    try:
        package_info = yaml.load(file(info_yaml_path))
    except YAMLError as e:
        raise QuitError('Bad format of info.yaml')

    src_dir = os.path.abspath(src_dir)
    real_ref = get_commit_info(src_dir, ref)

    if kwargs['verbose']:
        print "Packing application from %s..." % src_dir,
        sys.stdout.flush()

    packed_app_path = pack_app(src_dir)

    if kwargs['verbose']:
        print 'Done'
        print 'Uploading application to server...',
        sys.stdout.flush()

    server_response = upload_packed_app(packed_app_path, package_info, real_ref, token, **kwargs)

    if kwargs['verbose']:
        print 'Done'
        print "Cleaning...",
        sys.stdout.flush()

    sh.rm("-f", packed_app_path)

    if kwargs['verbose']:
        print 'Done'

    print server_response


@command(shortlist=True)
def deploy(runlist, app_uuid, profile_name,
           profile_path=('f', '', 'path to profile file'),
           *args, **kwargs):
    token = get_token(kwargs)

    if profile_path:
        profile_path = os.path.abspath(profile_path)
        if not os.path.exists(profile_path) or os.path.isdir(profile_path):
            raise QuitError('Invalid path to profile')

        try:
            profile_info = yaml.load(file(profile_path))
        except YAMLError as e:
            raise QuitError('Bad format of profile yaml')

    url = API_SERVER + '/deploy/%s/%s/%s' % (runlist, app_uuid, profile_name)
    if profile_path:
        rv = requests.post(url, data={
            'info': json.dumps(profile_info),
            'token': token
        })
    else:
        rv = requests.post(url, data={
            'token': token
        })

    if rv.status_code != 200:
        raise QuitError('Error during  deploying on server. Reason: %s' % rv.text)

    print 'Done!'


options = [('v', 'verbose', False, 'enable additional output'),
           ('q', 'quiet', False, 'suppress output'),
           ('t', 'token', '', 'token to use')]

if __name__ == '__main__':
    dispatch(globaloptions=options)
